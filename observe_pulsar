#!/bin/bash
#
# Usage:  observe_pulsar name freq bandwidth gain obs-time longitude
#
PATH=$PATH:/usr/local/bin
export PATH

trap "rm -f usrp$$ tmp$$; exit" 1 2 3 4 5 6 7 8 9 10

#
# Figure out where to write output files
#
if [ -e /mnt/extra ]
then
	PREFIX=/mnt/extra/
else
    PREFIX=$HOME/
fi

#
# If this environment variable exists, it overrides previous decisions
#
if [ @$PSR_DATA_LOCATION@ != "@@" ]
then
	PREFIX=${PSR_DATA_LOCATION}/
fi

#
# Check command line args
#
if [ $# -lt 6 ]
then
	echo Usage:  observe_pulsar name freq bandwidth gain obs-time longitude [dscale]
	exit
fi

DEVICE="None"
SRATE=`python -c "print ($3 * 1.0e6)"`
FREQ=`python -c "print ($2 * 1.0e6)"`
OBSTIME=`expr $5 '*' 60`
RFGAIN=$4
SUBDEV="A:A"
SUPPORTED="usrp rtlsdr airspy hackrf limesdr"
PPS=internal
CLOCK=internal
LONGITUDE=$6
if [ "@$7@" != "@@" ]
then
	DSCALE=$7
else
	DSCALE=1
fi

#
# Figure out where the PSR database is
#
DB=/usr/local/share/psr_db.txt
dbfile=$HOME/psr_db.txt
if [ -e ./psr_db.txt ]
then
	dbfile=./psr_db.txt
elif [ -e $HOME/psr_db.txt ]
then
	dbfile=$HOME/psr_db.txt
elif [ -e $DB ]
then
	dbfile=$DB
else
	echo Cannot find PSR database file
	exit
fi
cased=`echo $1 |tr [A-Z] [a-z]`
if grep -qi $cased $dbfile
then
	eval `grep $cased $dbfile`
else
	echo "Could not find pulsar params in database for: $1"
	exit
fi

#
# Check the USB bus on the system
#

lsusb >tmp$$

#
# Then look for possible SDR devices on USB first
#

#
# UHD USB B200 devices
#
if grep -q '2500:002[0123]' tmp$$
then
   clk=`python -c "print $SRATE*4"`
   DEVICE="type=b200,num_recv_frames=128,master_clock_rate=$clk,subdev='A:A'"
   uhd_usrp_probe --args type=b200 >usrp$$ 2>&1
   SUBDEV="A:A"
   if grep -i -q "no.*gps.*found" usrp$$
   then
	EXEC=pulsar_filterbank_ntp.py
	PPS=external
	CLOCK=external
   else
    EXEC=pulsar_filterbank_gps.py
    PPS=gpsdo
    CLOCK=gpsdo
   fi
   rm -f usrp$$
#
# RTLSDR
#
elif grep -q "0bda:283[28]" tmp$$
then
  DEVICE="rtl=0"
  EXEC=pulsar_filterbank_none.py
  SRATE=`python -c "rate=$SRATE if $SRATE < 2500000 else 2500000; print rate"`
#
# AIRSPY
#
elif grep -q "1d50:60a1" tmp$$
then
  DEVICE="airspy=0"
  EXEC=pulsar_filterbank_none.py
#
# HackRF
#
elif grep -q "1d50:6089" tmp$$
then
  DEVICE="hackrf=0"
  EXEC=pulsar_filterbank_none.py
#
# LimeSDR
#
elif grep -q "1d50:6108" tmp$$
then
  DEVICE="soapy,driver=lime"
  EXEC=pulsar_filterbank_none.py
elif grep -q "0403:601f" tmp$$
then
  DEVICE="soapy,driver=lime"
  EXEC=pulsar_filterbank_none.py
fi

rm -f tmp$$

#
# Still nothing from USB scan, try for a net-connected UHD device
#
# Make brash assumptions about inet addy and subdev name
#
if [ $DEVICE = None ]
then
	uhd_find_devices >usrp$$ 2>&1
	if grep -q "Device Address" usrp$$
	then
	    DEVICE="addr=192.168.10.2"
	    SUBDEV="A:0"
	    uhd_usrp_probe --args $DEVICE >usrp$$ 2>&1
	    if grep -i -q "no.*gps.*found" usrp$$
	    then
			EXEC=pulsar_filterbank_ntp.py
			PPS=external
			CLOCK=external
		else
		    EXEC=pulsar_filterbank_gps.py
		    PPS=gpsdo
		    CLOCK=gpsdo
		fi
     fi
     rm -f usrp$$
fi

rm -f usrp$$
rm -f tmp$$

if [ $DEVICE = None ]
then
	echo "No supported SDR devices found: $SUPPORTED"
	exit
fi
echo Found $DEVICE running at $SRATE on $FREQ
echo Will run for $OBSTIME seconds
echo PSR params: PW50 $PW50 DM $DM RA $RA DEC $DEC

#
# Wait for pulsar to "rise" -- to be within obstime/2 of transit
#
if [ $OBSTIME -gt 0 ]
then
	target=`python -c "print ($RA - ($OBSTIME/3600.0)/1.95)"`
	while true
	do
		lmst=`lmst.py $LONGITUDE`
		truth=`python -c "t=True if abs($target-$lmst) <  0.05 else False; print t"`
		if [ $truth = True ]
		then
			echo Starting receiver at $lmst
			break
		fi
		echo Waiting for pulsar to rise at: $target, current LMST is $lmst
		sleep 15
	done
else
	OBSTIME=`expr $OBSTIME '*' -1`
fi

#
# Call the appropriate version of the Gnu Radio flow-graph
#
RESOLUTION=1
if [ "@$RFILIST@"  != "@@" ]
then
	RESOLUTION=2
fi
$EXEC --dec $DEC --ra $RA --device $DEVICE --dm $DM --freq $FREQ  \
   --pps $PPS --prefix $PREFIX --pw50 $PW50 --refclock $CLOCK --rfgain $RFGAIN --runtime $OBSTIME \
   --source $1 --srate $SRATE --subdev $SUBDEV --rfilist "$RFILIST" --resolution $RESOLUTION --median 1 \
   --thresh 2.2 --dscale $DSCALE
